/*
 * This file is generated by jOOQ.
 */
package org.example.components.domain.tables;


import org.example.components.domain.Keys;
import org.example.components.domain.Public;
import org.example.components.domain.tables.records.ElementRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Element extends TableImpl<ElementRecord> {

    private static final long serialVersionUID = 2015017060;

    /**
     * The reference instance of <code>public.element</code>
     */
    public static final Element ELEMENT = new Element();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementRecord> getRecordType() {
        return ElementRecord.class;
    }

    /**
     * The column <code>public.element.id</code>.
     */
    public final TableField<ElementRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('element_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.element.element_type_id</code>.
     */
    public final TableField<ElementRecord, Long> ELEMENT_TYPE_ID = createField(DSL.name("element_type_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.element.manufacturer_id</code>.
     */
    public final TableField<ElementRecord, Long> MANUFACTURER_ID = createField(DSL.name("manufacturer_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.element.manufacturer_number</code>.
     */
    public final TableField<ElementRecord, String> MANUFACTURER_NUMBER = createField(DSL.name("manufacturer_number"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.element.description</code>.
     */
    public final TableField<ElementRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.element.status</code>.
     */
    public final TableField<ElementRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.field("'MODERATION'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.element</code> table reference
     */
    public Element() {
        this(DSL.name("element"), null);
    }

    /**
     * Create an aliased <code>public.element</code> table reference
     */
    public Element(String alias) {
        this(DSL.name(alias), ELEMENT);
    }

    /**
     * Create an aliased <code>public.element</code> table reference
     */
    public Element(Name alias) {
        this(alias, ELEMENT);
    }

    private Element(Name alias, Table<ElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Element(Name alias, Table<ElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Element(Table<O> child, ForeignKey<O, ElementRecord> key) {
        super(child, key, ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ElementRecord, Long> getIdentity() {
        return Keys.IDENTITY_ELEMENT;
    }

    @Override
    public UniqueKey<ElementRecord> getPrimaryKey() {
        return Keys.ELEMENT_PKEY;
    }

    @Override
    public List<UniqueKey<ElementRecord>> getKeys() {
        return Arrays.<UniqueKey<ElementRecord>>asList(Keys.ELEMENT_PKEY, Keys.ELEMENT_MANUFACTURER_NUMBER_DESCRIPTION_KEY);
    }

    @Override
    public List<ForeignKey<ElementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ElementRecord, ?>>asList(Keys.ELEMENT__ELEMENT_ELEMENT_TYPE_ID_FKEY, Keys.ELEMENT__ELEMENT_MANUFACTURER_ID_FKEY);
    }

    public ElementType elementType() {
        return new ElementType(this, Keys.ELEMENT__ELEMENT_ELEMENT_TYPE_ID_FKEY);
    }

    public Manufacturer manufacturer() {
        return new Manufacturer(this, Keys.ELEMENT__ELEMENT_MANUFACTURER_ID_FKEY);
    }

    @Override
    public Element as(String alias) {
        return new Element(DSL.name(alias), this);
    }

    @Override
    public Element as(Name alias) {
        return new Element(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Element rename(String name) {
        return new Element(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Element rename(Name name) {
        return new Element(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package org.example.components.domain.tables;


import org.example.components.domain.Keys;
import org.example.components.domain.Public;
import org.example.components.domain.tables.records.FootprintRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Footprint extends TableImpl<FootprintRecord> {

    private static final long serialVersionUID = -1701603127;

    /**
     * The reference instance of <code>public.footprint</code>
     */
    public static final Footprint FOOTPRINT = new Footprint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FootprintRecord> getRecordType() {
        return FootprintRecord.class;
    }

    /**
     * The column <code>public.footprint.id</code>.
     */
    public final TableField<FootprintRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('footprint_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.footprint.name</code>.
     */
    public final TableField<FootprintRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.footprint.status</code>.
     */
    public final TableField<FootprintRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.field("'MODERATION'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.footprint</code> table reference
     */
    public Footprint() {
        this(DSL.name("footprint"), null);
    }

    /**
     * Create an aliased <code>public.footprint</code> table reference
     */
    public Footprint(String alias) {
        this(DSL.name(alias), FOOTPRINT);
    }

    /**
     * Create an aliased <code>public.footprint</code> table reference
     */
    public Footprint(Name alias) {
        this(alias, FOOTPRINT);
    }

    private Footprint(Name alias, Table<FootprintRecord> aliased) {
        this(alias, aliased, null);
    }

    private Footprint(Name alias, Table<FootprintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Footprint(Table<O> child, ForeignKey<O, FootprintRecord> key) {
        super(child, key, FOOTPRINT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<FootprintRecord, Long> getIdentity() {
        return Keys.IDENTITY_FOOTPRINT;
    }

    @Override
    public UniqueKey<FootprintRecord> getPrimaryKey() {
        return Keys.FOOTPRINT_PKEY;
    }

    @Override
    public List<UniqueKey<FootprintRecord>> getKeys() {
        return Arrays.<UniqueKey<FootprintRecord>>asList(Keys.FOOTPRINT_PKEY, Keys.FOOTPRINT_NAME_KEY);
    }

    @Override
    public Footprint as(String alias) {
        return new Footprint(DSL.name(alias), this);
    }

    @Override
    public Footprint as(Name alias) {
        return new Footprint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Footprint rename(String name) {
        return new Footprint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Footprint rename(Name name) {
        return new Footprint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}

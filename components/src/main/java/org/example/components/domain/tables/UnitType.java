/*
 * This file is generated by jOOQ.
 */
package org.example.components.domain.tables;


import org.example.components.domain.Keys;
import org.example.components.domain.Public;
import org.example.components.domain.tables.records.UnitTypeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UnitType extends TableImpl<UnitTypeRecord> {

    private static final long serialVersionUID = 1396715682;

    /**
     * The reference instance of <code>public.unit_type</code>
     */
    public static final UnitType UNIT_TYPE = new UnitType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnitTypeRecord> getRecordType() {
        return UnitTypeRecord.class;
    }

    /**
     * The column <code>public.unit_type.id</code>.
     */
    public final TableField<UnitTypeRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('unit_type_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.unit_type.name</code>.
     */
    public final TableField<UnitTypeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>public.unit_type</code> table reference
     */
    public UnitType() {
        this(DSL.name("unit_type"), null);
    }

    /**
     * Create an aliased <code>public.unit_type</code> table reference
     */
    public UnitType(String alias) {
        this(DSL.name(alias), UNIT_TYPE);
    }

    /**
     * Create an aliased <code>public.unit_type</code> table reference
     */
    public UnitType(Name alias) {
        this(alias, UNIT_TYPE);
    }

    private UnitType(Name alias, Table<UnitTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UnitType(Name alias, Table<UnitTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UnitType(Table<O> child, ForeignKey<O, UnitTypeRecord> key) {
        super(child, key, UNIT_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UnitTypeRecord, Long> getIdentity() {
        return Keys.IDENTITY_UNIT_TYPE;
    }

    @Override
    public UniqueKey<UnitTypeRecord> getPrimaryKey() {
        return Keys.UNIT_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<UnitTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<UnitTypeRecord>>asList(Keys.UNIT_TYPE_PKEY, Keys.UNIT_TYPE_NAME_KEY);
    }

    @Override
    public UnitType as(String alias) {
        return new UnitType(DSL.name(alias), this);
    }

    @Override
    public UnitType as(Name alias) {
        return new UnitType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitType rename(String name) {
        return new UnitType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UnitType rename(Name name) {
        return new UnitType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
